from sqlalchemy import Column, Integer, String, Text, DateTime, func, Index, ForeignKey # Added ForeignKey
from sqlalchemy.orm import relationship # Added relationship
from sqlalchemy.sql import expression
from ..database import Base # Adjusted import path

class CodeFile(Base):
    __tablename__ = "code_files"

    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    file_path = Column(Text, nullable=False, unique=True, index=True) # Full absolute path
    file_name = Column(String(255), nullable=False, index=True)
    parent_directory = Column(Text, nullable=False, index=True) # Full absolute path of parent
    # project_root = Column(Text, nullable=False, index=True) # Root directory of the indexed project - REMOVED
    project_id = Column(Integer, ForeignKey('projects.id'), nullable=False, index=True) # ADDED
    file_hash = Column(String(64), nullable=False)  # SHA-256 hash
    size_bytes = Column(Integer, nullable=False)
    last_modified_at_fs = Column(DateTime, nullable=False) # Timestamp from file system
    description = Column(Text, nullable=True) # Generated by AI agent

    created_at_db = Column(DateTime, server_default=func.now(), nullable=False)
    updated_at_db = Column(DateTime, server_default=func.now(), onupdate=func.now(), nullable=False)

    # Relationship to Project (many-to-one)
    project = relationship("Project", back_populates="code_files") # ADDED

    __table_args__ = (
        Index('ix_code_files_project_id_file_path', 'project_id', 'file_path', unique=True), # MODIFIED
    )

    def __repr__(self):
        return f"<CodeFile(id={self.id}, file_name='{self.file_name}', project_id='{self.project_id}')>"
